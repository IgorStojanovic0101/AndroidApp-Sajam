package com.example.mykotlinapp.services

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.widget.Toast
import com.android.volley.Request
import com.android.volley.RequestQueue
import com.android.volley.Response
import com.android.volley.toolbox.Volley
import com.example.mykotlinapp.contract.MainActivityContract
import com.android.volley.VolleyError
import org.json.JSONException

import org.json.JSONObject
import org.json.JSONArray
import com.android.volley.toolbox.JsonObjectRequest
import com.android.volley.toolbox.StringRequest

import android.os.AsyncTask
import android.widget.Toast.LENGTH_LONG
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.net.HttpURLConnection
import java.net.MalformedURLException
import java.net.URL
import com.example.mykotlinapp.services.Login_Service.LoadingTaskFinishedListener




class Login_Service : Service() {
    private lateinit var myFilterResponse: Intent
    private lateinit var mQueue: RequestQueue
    private lateinit var json: String
    private lateinit var jsonObj: JSONObject


   inner class Child : LoadingTaskFinishedListener {
       lateinit var position: String
        override fun onTaskFinished(domain: String) {
            this.position=domain


        }

    }
    override fun onCreate() {
        super.onCreate()
    }

    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
        //Log.e("MyService3-onStart","I am alive");
        //Dug zadataka ide u poseban thread

        myFilterResponse = Intent("login_rec")
        val username=intent.getStringExtra("username")
        val password=intent.getStringExtra("password")
        AsinhroniTaskNamirnice().execute(username,password)
        this.json=Child().position
       // Thread.sleep(2000)

        if (json == null)
            Toast.makeText(this, "Nije uspeo pristup bazi", LENGTH_LONG).show()






        myFilterResponse.putExtra("serviceData", json)

        sendBroadcast(myFilterResponse)

        stopSelf()

        return Service.START_NOT_STICKY
    }

    override fun onDestroy() {
        super.onDestroy()
        //  Log.e("MyService-onDestroy","I am Dead");

    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }
    interface LoadingTaskFinishedListener {
        fun onTaskFinished(domain: String)  // If you want to pass something back to the listener add a param to this method
    }


    inner class AsinhroniTaskNamirnice internal constructor() : AsyncTask<String, Void, String>() {
        lateinit var JSON_STRING: String
        lateinit var json_url: String
        lateinit var finishedListener: LoadingTaskFinishedListener

        override fun onPreExecute() {

        }

        override fun doInBackground(vararg params: String): String? {
            try {

                val param1="admin"
                val param2="admin"

                json_url = "http://192.168.1.109:1120/sajam/korisnici?username="+param1+"&password="+param2


                val url = URL(json_url)

                val httpURLConnection = url.openConnection() as HttpURLConnection

                val IS = httpURLConnection.getInputStream()
                val BR = BufferedReader(InputStreamReader(IS))
                JSON_STRING = BR.readLine()


              //  json=JSON_STRING



                BR.close()
                IS.close()
                httpURLConnection.disconnect()

                return JSON_STRING


            } catch (e: MalformedURLException) {
                e.printStackTrace()
            } catch (e: IOException) {
                e.printStackTrace()
            }

            return JSON_STRING

        }

        override fun onProgressUpdate(vararg values: Void) {
            super.onProgressUpdate(*values)
        }

        override fun onPostExecute(result: String) {
            super.onPostExecute(result)
            finishedListener.onTaskFinished(result);

        }

    }
}